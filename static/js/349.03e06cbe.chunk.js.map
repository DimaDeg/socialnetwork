{"version":3,"file":"static/js/349.03e06cbe.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.tsx","components/Content/Profile/ProfileInfo/ProfileStatus.tsx","webpack://socialnetwork/./src/components/Content/Profile/ProfileInfo/ProfileInfo.module.css?44c3","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","webpack://socialnetwork/./src/components/Content/Profile/MyPosts/MyPosts.module.css?2f9f","webpack://socialnetwork/./src/components/Content/Profile/MyPosts/Post/Post.module.css?633c","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/PostForm.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/MyPosts/MyPostsContainer.tsx","webpack://socialnetwork/./src/components/Content/Profile/Profile.module.css?6da8","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport { AppStateType } from \"../Redux/ReduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({isAuth: state.Auth.isAuth})\r\n\r\n\r\nexport const withAuthRedirect = <P extends object>(Component:React.ComponentType<P>):React.FC<P> => {\r\n    const WithRedirect: React.FC<MapStatePropsType> =({isAuth,...props}) =>{\r\n        if(!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...props as P}/>\r\n    }\r\n    return connect(mapStateToProps)(WithRedirect)\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (statusText: string) => void\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = ({status,updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [statusText, setStatusText] = useState<string>(status)\r\n\r\n    useEffect(()=>{\r\n        setStatusText(status)\r\n    },[status])\r\n\r\n    const editModeTrue = () => {\r\n        setEditMode(true)\r\n        setStatusText(status)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setEditMode(false)\r\n        if (status === statusText) return\r\n        updateStatus(statusText.trim())\r\n    }\r\n\r\n    const changeStatus = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatusText(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {editMode ?\r\n            <div><input onBlur={onBlurHandler}  onChange={changeStatus} value={statusText} autoFocus={true}/></div> :\r\n            <div><span onDoubleClick={editModeTrue} style={{color: 'white'}}>status: {statusText}</span></div>}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileInfo_item__2oL5Q\",\"ava\":\"ProfileInfo_ava__WOxRT\"};","import React, {ChangeEvent} from \"react\";\nimport {ProfileUserType, savePhoto} from \"../../../../Redux/reducers/profile-reducer\";\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\nimport userPhoto from '../../../../assets/images/user.png'\nimport {ProfileStatus} from \"./ProfileStatus\";\nimport s from './ProfileInfo.module.css'\nimport {useDispatch} from \"react-redux\";\n\n\ntype ProfileInfoPropsType = {\n    profile: ProfileUserType | null\n    status: string\n    updateStatus: (statusText: string) => void\n    isOwner: boolean,\n    savePhoto: (photo: File) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, isOwner, ...props}) => {\n    const dispatch = useDispatch()\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) {\n            dispatch(savePhoto(e.target.files[0]))\n        }\n    }\n\n    return (\n        <div>\n            <img className={s.ava} src={profile && profile.photos.large ? profile.photos.large : userPhoto}\n                 alt={''}/>\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\n            <span style={{color: 'white', fontSize: 20}}>{profile && profile.fullName}</span>\n            <ProfileStatus {...props}/>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"border\":\"MyPosts_border__RQfIZ\",\"i\":\"MyPosts_i__lBHZC\",\"h2\":\"MyPosts_h2__pS8VD\",\"h3\":\"MyPosts_h3__xBs5m\",\"in\":\"MyPosts_in__O0V-K\",\"post\":\"MyPosts_post__83pBo\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__13ty8\",\"like\":\"Post_like__C7F78\",\"post\":\"Post_post__JlTKb\"};","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../../Redux/reducers/profile-reducer\";\n\n\nexport const Post: React.FC<PostType> = (props) => {\n\n    return (\n        <div className={s.item}>\n            <img src='https://publicdomainvectors.org/tn_img/Male-Avatar-2.webp' alt={props.post}/>\n            <div className={s.post} key={props.id}>{props.post}</div>\n            <div>\n                <span className={s.like}>Like {props.likeCount}</span>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\n\r\ntype PostFormTextareaPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport const PostForm: React.FC<PostFormTextareaPropsType> = ({addPost}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        onSubmit: (values, {resetForm}) => {\r\n            addPost(values.post)\r\n            resetForm({values: {post: ''}})\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor={'post'}>\r\n                <input name={'post'} id={'post'} placeholder={'your post'}\r\n                       onChange={formik.handleChange} value={formik.values.post}\r\n                />\r\n            </label>\r\n            <button disabled={formik.values.post === ''} type={'submit'}>click</button>\r\n        </form>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport {Post} from './Post/Post';\nimport {MyPostsPageType} from \"./MyPostsContainer\";\nimport {PostForm} from \"./PostForm\";\n\nexport const MyPosts: React.FC<MyPostsPageType> = React.memo((props) => {\n\n    let postsElements = props.posts.map(p => <div key={p.id} className={s.post}><Post id={p.id}\n                                                                           post={p.post}\n                                                                           likeCount={p.likeCount}/></div>)\n\n    return (\n        <div className={s.border}>\n            <h2 className={s.h2}>My posts</h2>\n            <div className={s.item}>\n                <h3 className={s.h3}>New Post</h3>\n                <PostForm addPost={props.addPost}/>\n            </div>\n            {postsElements}\n        </div>\n    )\n})\n","import {addPostAC, PostType} from \"../../../../Redux/reducers/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/ReduxStore\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    posts: PostType[]\n}\ntype DispatchToPropsType = {\n    addPost:(text:string)=>void\n}\nexport type MyPostsPageType = MapStateToPropsType & DispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType):MapStateToPropsType => {\n    return {\n        posts: state.ProfilePage.posts\n    }\n}\n\nconst mapDispatchToProps = (dispatch:Dispatch):DispatchToPropsType => {\n    return {\n        addPost: (text)=>dispatch(addPostAC(text)),\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__e1vSD\",\"bi\":\"Profile_bi__ZGY3a\",\"back\":\"Profile_back__t460J\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileUserType} from \"../../../Redux/reducers/profile-reducer\";\nimport s from './Profile.module.css'\n\ntype ProfilePropsType = {\n    profile: ProfileUserType | null\n    status: string\n    updateStatus: (statusText: string) => void\n    isOwner: boolean\n    savePhoto: (photo:File) => void\n}\n\n\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\n\n    return (\n        <div className={s.back}>\n            <ProfileInfo {...props}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, ProfileUserType, savePhoto, updateStatus} from \"../../../Redux/reducers/profile-reducer\";\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\nimport {CustomWithRouter} from \"../../../HOC/withRouter\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileUserType | null\r\n    status: string,\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfile: (id: number) => void\r\n    getStatus: (id: number) => void\r\n    updateStatus: (text: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType & { params: { userId: number } }, {}> {\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.params.userId)\r\n        if (!userId && this.props.authorizedUserId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType & { params: { userId: number } }>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.params.userId !== prevProps.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner={!this.props.params.userId} savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.ProfilePage.profile,\r\n        status: state.ProfilePage.status,\r\n        authorizedUserId: state.Auth.id\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect, connect(mapStateToProps, {\r\n    getProfile, getStatus, updateStatus, savePhoto\r\n}), CustomWithRouter)(ProfileContainer)\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["mapStateToProps","state","isAuth","Auth","withAuthRedirect","Component","connect","props","to","ProfileStatus","status","updateStatus","useState","editMode","setEditMode","statusText","setStatusText","useEffect","onBlur","trim","onChange","e","currentTarget","value","autoFocus","onDoubleClick","style","color","ProfileInfo","profile","isOwner","dispatch","useDispatch","Preloader","className","s","src","photos","large","userPhoto","alt","type","target","files","savePhoto","fontSize","fullName","Post","post","id","likeCount","PostForm","addPost","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","htmlFor","name","placeholder","handleChange","disabled","MyPosts","React","postsElements","posts","map","p","MyPostsContainer","ProfilePage","text","addPostAC","Profile","ProfileContainer","userId","Number","this","params","authorizedUserId","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","CustomWithRouter","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}